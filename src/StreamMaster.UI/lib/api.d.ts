/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/apikeys": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["APIKeys_GetKeys"];
		put?: never;
		post: operations["APIKeys_CreateKey"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/apikeys/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["APIKeys_RevokeKey"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/devices": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Devices_GetDevices"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/devices/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["Devices_RevokeDevice"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/files/{source}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Files_GetLogo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/files/getsmfs/{APIKey}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Files_GetSMFS"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/files/getsmfs/{APIKey}/{isShort}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Files_GetSMFS2"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/files/getsmfs/{APIKey}/{isShort}/{encodedIds}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Files_GetSMFS3"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/files/sm/{smChannelId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Files_GetSMChannelLogo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/files/pr/{source}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Files_GetProgramLogo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/files/cu/{source}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Files_GetCustomLogo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/files/tv/{source}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Files_GetTvLogo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/misc/getdownloadservicestatus": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Misc_GetDownloadServiceStatus"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/misc/getchanneldigetchanneldistributors": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Misc_GetChannelDiGetChannelDistributors"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/misc/cachesicons": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Misc_CacheSIcons"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/misc/gettestm3u": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Misc_GetTestM3U"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/misc/gettestepg": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Misc_GetTestEPG"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/misc/backup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put: operations["Misc_Backup"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupCapability"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}/capability": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupCapability2"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}/device.xml": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupCapability3"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}/discover.json": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupDiscover"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}/lineup.json": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupLineup"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}/lineup_status.json": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupLineupStatus"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}/epg.xml": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupEPG"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}.xml": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupEPG2"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}/m3u.m3u": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupM3U"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}.m3u": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetStreamGroupM3U2"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/s/{streamGroupProfileId}/auto/v{channelNumber}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Ss_GetAutoStream"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/test/scandirectoryform3ufiles": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put: operations["Test_ScanDirectoryForM3UFiles"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/test/scanfortvlogos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put: operations["Test_ScanForTvLogos"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/test/setsystemready": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put: operations["Test_SetSystemReady"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/test/updatechannelgroupcountsrequest": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put: operations["Test_UpdateChannelGroupCountsRequest"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/v/{encodedIds}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Vs_HandleStreamRequestGET"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head: operations["Vs_HandleStreamRequestHEAD"];
		patch?: never;
		trace?: never;
	};
	"/v/{encodedIds}.ts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Vs_HandleStreamRequestGET2"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head: operations["Vs_HandleStreamRequestHEAD2"];
		patch?: never;
		trace?: never;
	};
	"/v/{streamGroupProfileId}/{smChannelId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Vs_HandleStreamRequestGET3"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head: operations["Vs_HandleStreamRequestHEAD3"];
		patch?: never;
		trace?: never;
	};
	"/v/{streamGroupProfileId}/{smChannelId}.ts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Vs_HandleStreamRequestGET4"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head: operations["Vs_HandleStreamRequestHEAD4"];
		patch?: never;
		trace?: never;
	};
	"/v/c/{encodedStreamLocation}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Vs_HandleSStreamRequestGET"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head: operations["Vs_HandleSStreamRequestHEAD"];
		patch?: never;
		trace?: never;
	};
	"/v/c/{encodedStreamLocation}.ts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Vs_HandleSStreamRequestGET2"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head: operations["Vs_HandleSStreamRequestHEAD2"];
		patch?: never;
		trace?: never;
	};
	"/api/websocket/triggerreload": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["WebSocket_TriggerReload"];
		trace?: never;
	};
	"/api/vs/getvs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Vs_GetVs"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streaming/cancelallchannels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Streaming_CancelAllChannels"];
		trace?: never;
	};
	"/api/streaming/cancelchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Streaming_CancelChannel"];
		trace?: never;
	};
	"/api/streaming/cancelclient": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Streaming_CancelClient"];
		trace?: never;
	};
	"/api/streaming/movetonextstream": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Streaming_MoveToNextStream"];
		trace?: never;
	};
	"/api/streamgroupsmchannellinks/getstreamgroupsmchannels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroupSMChannelLinks_GetStreamGroupSMChannels"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroupsmchannellinks/addsmchannelstostreamgroupbyparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["StreamGroupSMChannelLinks_AddSMChannelsToStreamGroupByParameters"];
		trace?: never;
	};
	"/api/streamgroupsmchannellinks/addsmchannelstostreamgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["StreamGroupSMChannelLinks_AddSMChannelsToStreamGroup"];
		trace?: never;
	};
	"/api/streamgroupsmchannellinks/addsmchanneltostreamgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["StreamGroupSMChannelLinks_AddSMChannelToStreamGroup"];
		trace?: never;
	};
	"/api/streamgroupsmchannellinks/removesmchannelfromstreamgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["StreamGroupSMChannelLinks_RemoveSMChannelFromStreamGroup"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/getpagedstreamgroups": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetPagedStreamGroups"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/getstreamgroupprofiles": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupProfiles"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/getstreamgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroup"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/getstreamgroups": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroups"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/addprofiletostreamgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["StreamGroups_AddProfileToStreamGroup"];
		trace?: never;
	};
	"/api/streamgroups/createstreamgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["StreamGroups_CreateStreamGroup"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/deletestreamgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["StreamGroups_DeleteStreamGroup"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/removestreamgroupprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["StreamGroups_RemoveStreamGroupProfile"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/updatestreamgroupprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["StreamGroups_UpdateStreamGroupProfile"];
		trace?: never;
	};
	"/api/streamgroups/updatestreamgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["StreamGroups_UpdateStreamGroup"];
		trace?: never;
	};
	"/api/streamgroups/{encodedId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupCapability"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/{encodedId}/capability": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupCapability2"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/{encodedId}/device.xml": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupCapability3"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/{encodedId}/discover.json": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupDiscover"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/{encodedId}/epg.xml": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupEPG"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/{encodedId}/lineup.json": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupLineup"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/{encodedId}/lineup_status.json": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupLineupStatus"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/{encodedId}/m3u.m3u": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetStreamGroupM3U"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/streamgroups/{encodedId}/auto/v{channelNumber}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["StreamGroups_GetAutoStream"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/getchannelmetrics": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetChannelMetrics"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/getdownloadservicestatus": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetDownloadServiceStatus"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/getissystemready": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetIsSystemReady"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/getstreamconnectionmetricdata": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetStreamConnectionMetricData"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/getstreamconnectionmetricdatas": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetStreamConnectionMetricDatas"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/getsystemstatus": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetSystemStatus"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/gettaskisrunning": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetTaskIsRunning"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/getvideoinfo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetVideoInfo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/statistics/getvideoinfos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Statistics_GetVideoInfos"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smtasks/getsmtasks": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SMTasks_GetSMTasks"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smtasks/sendsmtasks": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMTasks_SendSMTasks"];
		trace?: never;
	};
	"/api/smstreams/getpagedsmstreams": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SMStreams_GetPagedSMStreams"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smstreams/createsmstream": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["SMStreams_CreateSMStream"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smstreams/deletesmstream": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SMStreams_DeleteSMStream"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smstreams/setsmstreamsvisiblebyid": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMStreams_SetSMStreamsVisibleById"];
		trace?: never;
	};
	"/api/smstreams/togglesmstreamsvisiblebyid": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMStreams_ToggleSMStreamsVisibleById"];
		trace?: never;
	};
	"/api/smstreams/togglesmstreamvisiblebyid": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMStreams_ToggleSMStreamVisibleById"];
		trace?: never;
	};
	"/api/smstreams/togglesmstreamvisiblebyparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMStreams_ToggleSMStreamVisibleByParameters"];
		trace?: never;
	};
	"/api/smstreams/updatesmstream": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMStreams_UpdateSMStream"];
		trace?: never;
	};
	"/api/smmessages/sendsmerror": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMMessages_SendSMError"];
		trace?: never;
	};
	"/api/smmessages/sendsminfo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMMessages_SendSMInfo"];
		trace?: never;
	};
	"/api/smmessages/sendsmmessage": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMMessages_SendSMMessage"];
		trace?: never;
	};
	"/api/smmessages/sendsmwarn": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMMessages_SendSMWarn"];
		trace?: never;
	};
	"/api/smmessages/sendsuccess": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMMessages_SendSuccess"];
		trace?: never;
	};
	"/api/smchannelstreamlinks/getsmchannelstreams": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SMChannelStreamLinks_GetSMChannelStreams"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannelstreamlinks/addsmstreamtosmchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannelStreamLinks_AddSMStreamToSMChannel"];
		trace?: never;
	};
	"/api/smchannelstreamlinks/removesmstreamfromsmchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SMChannelStreamLinks_RemoveSMStreamFromSMChannel"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannelstreamlinks/setsmstreamranks": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannelStreamLinks_SetSMStreamRanks"];
		trace?: never;
	};
	"/api/smchannels/getpagedsmchannels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SMChannels_GetPagedSMChannels"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/getsmchanneluniquename": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SMChannels_GetSMChannelUniqueName"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/autosetepgfromparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_AutoSetEPGFromParameters"];
		trace?: never;
	};
	"/api/smchannels/autosetepg": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_AutoSetEPG"];
		trace?: never;
	};
	"/api/smchannels/autosetsmchannelnumbersfromparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_AutoSetSMChannelNumbersFromParameters"];
		trace?: never;
	};
	"/api/smchannels/autosetsmchannelnumbers": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_AutoSetSMChannelNumbers"];
		trace?: never;
	};
	"/api/smchannels/copysmchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_CopySMChannel"];
		trace?: never;
	};
	"/api/smchannels/createmultiviewchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["SMChannels_CreateMultiViewChannel"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/createsmchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["SMChannels_CreateSMChannel"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/createsmchannelsfromstreamparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["SMChannels_CreateSMChannelsFromStreamParameters"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/createsmchannelsfromstreams": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["SMChannels_CreateSMChannelsFromStreams"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/deletesmchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SMChannels_DeleteSMChannel"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/deletesmchannelsfromparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SMChannels_DeleteSMChannelsFromParameters"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/deletesmchannels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SMChannels_DeleteSMChannels"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannels/setsmchannelepgid": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelEPGId"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelGroup"];
		trace?: never;
	};
	"/api/smchannels/setsmchannellogo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelLogo"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelname": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelName"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelnumber": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelNumber"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelsgroupfromparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelsGroupFromParameters"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelsgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelsGroup"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelslogofromepgfromparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelsLogoFromEPGFromParameters"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelslogofromepg": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelsLogoFromEPG"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelscommandprofilenamefromparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelsCommandProfileNameFromParameters"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelscommandprofilename": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelsCommandProfileName"];
		trace?: never;
	};
	"/api/smchannels/setsmchannelcommandprofilename": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_SetSMChannelCommandProfileName"];
		trace?: never;
	};
	"/api/smchannels/togglesmchannelsvisiblebyid": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_ToggleSMChannelsVisibleById"];
		trace?: never;
	};
	"/api/smchannels/togglesmchannelvisiblebyid": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_ToggleSMChannelVisibleById"];
		trace?: never;
	};
	"/api/smchannels/togglesmchannelvisiblebyparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_ToggleSMChannelVisibleByParameters"];
		trace?: never;
	};
	"/api/smchannels/updatemultiviewchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_UpdateMultiViewChannel"];
		trace?: never;
	};
	"/api/smchannels/updatesmchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannels_UpdateSMChannel"];
		trace?: never;
	};
	"/api/smchannelchannellinks/getsmchannelchannels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SMChannelChannelLinks_GetSMChannelChannels"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannelchannellinks/addsmchanneltosmchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannelChannelLinks_AddSMChannelToSMChannel"];
		trace?: never;
	};
	"/api/smchannelchannellinks/removesmchannelfromsmchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SMChannelChannelLinks_RemoveSMChannelFromSMChannel"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/smchannelchannellinks/setsmchannelranks": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SMChannelChannelLinks_SetSMChannelRanks"];
		trace?: never;
	};
	"/api/settings/getsettings": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Settings_GetSettings"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/settings/updatesetting": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Settings_UpdateSetting"];
		trace?: never;
	};
	"/api/schedulesdirect/getavailablecountries": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetAvailableCountries"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/getheadendsbycountrypostal": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetHeadendsByCountryPostal"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/getheadendstoview": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetHeadendsToView"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/getlineuppreviewchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetLineupPreviewChannel"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/getselectedstationids": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetSelectedStationIds"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/getstationchannelnames": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetStationChannelNames"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/getstationpreviews": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetStationPreviews"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/getsubscribedheadends": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetSubScribedHeadends"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/getsubscribedlineups": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["SchedulesDirect_GetSubscribedLineups"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/addheadendtoview": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SchedulesDirect_AddHeadendToView"];
		trace?: never;
	};
	"/api/schedulesdirect/addlineup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SchedulesDirect_AddLineup"];
		trace?: never;
	};
	"/api/schedulesdirect/addstation": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SchedulesDirect_AddStation"];
		trace?: never;
	};
	"/api/schedulesdirect/removeheadendtoview": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SchedulesDirect_RemoveHeadendToView"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/removelineup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SchedulesDirect_RemoveLineup"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/removestation": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["SchedulesDirect_RemoveStation"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/schedulesdirect/setstations": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["SchedulesDirect_SetStations"];
		trace?: never;
	};
	"/api/profiles/getcommandprofiles": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Profiles_GetCommandProfiles"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/profiles/getoutputprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Profiles_GetOutputProfile"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/profiles/getoutputprofiles": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Profiles_GetOutputProfiles"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/profiles/addcommandprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Profiles_AddCommandProfile"];
		trace?: never;
	};
	"/api/profiles/addoutputprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Profiles_AddOutputProfile"];
		trace?: never;
	};
	"/api/profiles/removecommandprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["Profiles_RemoveCommandProfile"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/profiles/removeoutputprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["Profiles_RemoveOutputProfile"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/profiles/updatecommandprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Profiles_UpdateCommandProfile"];
		trace?: never;
	};
	"/api/profiles/updateoutputprofile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Profiles_UpdateOutputProfile"];
		trace?: never;
	};
	"/api/m3ufiles/getm3ufilenames": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["M3UFiles_GetM3UFileNames"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/m3ufiles/getm3ufiles": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["M3UFiles_GetM3UFiles"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/m3ufiles/getpagedm3ufiles": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["M3UFiles_GetPagedM3UFiles"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/m3ufiles/createm3ufile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["M3UFiles_CreateM3UFile"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/m3ufiles/deletem3ufile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["M3UFiles_DeleteM3UFile"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/m3ufiles/processm3ufile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["M3UFiles_ProcessM3UFile"];
		trace?: never;
	};
	"/api/m3ufiles/refreshm3ufile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["M3UFiles_RefreshM3UFile"];
		trace?: never;
	};
	"/api/m3ufiles/syncchannels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["M3UFiles_SyncChannels"];
		trace?: never;
	};
	"/api/m3ufiles/updatem3ufile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["M3UFiles_UpdateM3UFile"];
		trace?: never;
	};
	"/api/m3ufiles/createm3ufilefromform": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["M3UFiles_CreateM3UFileFromForm"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/logs/getlogcontents": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Logs_GetLogContents"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/logs/getlognames": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Logs_GetLogNames"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/logos/getcustomlogos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Logos_GetCustomLogos"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/logos/getlogoforchannel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Logos_GetLogoForChannel"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/logos/getlogo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Logos_GetLogo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/logos/getlogos": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Logos_GetLogos"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/logos/addcustomlogo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Logos_AddCustomLogo"];
		trace?: never;
	};
	"/api/logos/removecustomlogo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["Logos_RemoveCustomLogo"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/general/settesttask": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["General_SetTestTask"];
		trace?: never;
	};
	"/api/epgfiles/getepgfilenames": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["EPGFiles_GetEPGFileNames"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epgfiles/getepgfilepreviewbyid": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["EPGFiles_GetEPGFilePreviewById"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epgfiles/getepgfiles": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["EPGFiles_GetEPGFiles"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epgfiles/getepgnextepgnumber": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["EPGFiles_GetEPGNextEPGNumber"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epgfiles/getpagedepgfiles": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["EPGFiles_GetPagedEPGFiles"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epgfiles/createepgfile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["EPGFiles_CreateEPGFile"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epgfiles/deleteepgfile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["EPGFiles_DeleteEPGFile"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epgfiles/processepgfile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["EPGFiles_ProcessEPGFile"];
		trace?: never;
	};
	"/api/epgfiles/refreshepgfile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["EPGFiles_RefreshEPGFile"];
		trace?: never;
	};
	"/api/epgfiles/updateepgfile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["EPGFiles_UpdateEPGFile"];
		trace?: never;
	};
	"/api/epgfiles/createepgfilefromform": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["EPGFiles_CreateEPGFileFromForm"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epg/getepgcolors": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["EPG_GetEPGColors"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/epg/epgsync": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["EPG_EPGSync"];
		trace?: never;
	};
	"/api/custom/getcustomplaylist": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Custom_GetCustomPlayList"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/custom/getcustomplaylists": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Custom_GetCustomPlayLists"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/custom/getintroplaylists": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["Custom_GetIntroPlayLists"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/custom/scanforcustom": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["Custom_ScanForCustom"];
		trace?: never;
	};
	"/api/channelgroups/getchannelgroupsfromsmchannels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["ChannelGroups_GetChannelGroupsFromSMChannels"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/channelgroups/getchannelgroups": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["ChannelGroups_GetChannelGroups"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/channelgroups/getpagedchannelgroups": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["ChannelGroups_GetPagedChannelGroups"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/channelgroups/createchannelgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["ChannelGroups_CreateChannelGroup"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/channelgroups/deleteallchannelgroupsfromparameters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["ChannelGroups_DeleteAllChannelGroupsFromParameters"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/channelgroups/deletechannelgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["ChannelGroups_DeleteChannelGroup"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/channelgroups/deletechannelgroups": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete: operations["ChannelGroups_DeleteChannelGroups"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/channelgroups/updatechannelgroup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["ChannelGroups_UpdateChannelGroup"];
		trace?: never;
	};
	"/api/channelgroups/updatechannelgroups": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch: operations["ChannelGroups_UpdateChannelGroups"];
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		CreateAPIKeyRequest: {
			deviceName?: string;
			scopes?: string[];
			/** Format: date-time */
			expiration?: string | null;
		};
		SGFS: {
			name?: string;
			url?: string;
			smfs?: components["schemas"]["SMFile"][];
		};
		SMFile: {
			name?: string;
			url?: string;
		};
		ImageDownloadServiceStatus: {
			/** Format: int32 */
			id?: number;
			programLogos?: components["schemas"]["DownloadStats"];
			logos?: components["schemas"]["DownloadStats"];
		};
		DownloadStats: {
			/** Format: int32 */
			queue?: number;
			/** Format: int32 */
			attempts?: number;
			/** Format: int32 */
			successful?: number;
			/** Format: int32 */
			alreadyExists?: number;
			/** Format: int32 */
			errors?: number;
		};
		SourceBroadcaster: {
			isStopped?: boolean;
			metricManager?: components["schemas"]["StreamConnectionMetricManager"];
			smStreamInfo?: components["schemas"]["SMStreamInfo"];
			metrics?: components["schemas"]["StreamHandlerMetrics"];
			isMultiView?: boolean;
			cancellationToken?: components["schemas"]["CancellationToken"];
			channelBroadcasters?: {
				[key: string]: components["schemas"]["IStreamDataToClients"];
			};
			isFailed?: boolean;
			id?: string;
			name?: string;
		};
		StreamConnectionMetricManager: {
			metricData?: components["schemas"]["StreamConnectionMetricData"];
		};
		StreamConnectionMetricData: {
			/** Format: date-time */
			lastSuccessConnectTime?: string | null;
			/** Format: date-time */
			lastErrorTime?: string | null;
			/** Format: date-time */
			lastConnectionAttemptTime?: string | null;
			/** Format: date-time */
			lastStartTime?: string;
			/** Format: int32 */
			retryCount?: number;
			/** Format: int32 */
			totalConnectionAttempts?: number;
			streamUrl?: string;
		};
		SMStreamInfo: {
			commandProfile: components["schemas"]["CommandProfileDto"];
			id: string;
			clientUserAgent: string | null;
			name: string;
			url: string;
			/** Format: int32 */
			secondsIn: number;
			smStreamType: components["schemas"]["SMStreamTypeEnum"];
		};
		CommandProfileDto: components["schemas"]["CommandProfile"] & {
			profileName?: string;
		};
		CommandProfile: {
			isReadOnly?: boolean;
			command?: string;
			parameters?: string;
		};
		/** @enum {integer} */
		SMStreamTypeEnum: 0 | 1 | 2 | 3 | 4;
		StreamHandlerMetrics: {
			/** Format: int64 */
			bytesRead: number;
			/** Format: int64 */
			bytesWritten: number;
			/** Format: double */
			kbps: number;
			/** Format: date-time */
			startTime: string;
			/** Format: double */
			averageLatency: number;
			/** Format: int32 */
			errorCount: number;
		};
		CancellationToken: {
			isCancellationRequested?: boolean;
			canBeCanceled?: boolean;
			waitHandle?: components["schemas"]["WaitHandle"];
		};
		WaitHandle: components["schemas"]["MarshalByRefObject"] & {
			/** @deprecated */
			handle?: components["schemas"]["IntPtr"];
			safeWaitHandle?: components["schemas"]["SafeWaitHandle"];
		};
		IntPtr: Record<string, never>;
		SafeWaitHandle: components["schemas"]["SafeHandleZeroOrMinusOneIsInvalid"] &
			Record<string, never>;
		SafeHandleZeroOrMinusOneIsInvalid: components["schemas"]["SafeHandle"] & {
			isInvalid?: boolean;
		};
		SafeHandle: components["schemas"]["CriticalFinalizerObject"] & {
			isClosed?: boolean;
			isInvalid?: boolean;
		};
		CriticalFinalizerObject: Record<string, never>;
		MarshalByRefObject: Record<string, never>;
		IStreamDataToClients: Record<string, never>;
		SetIsSystemReadyRequest: {
			isSystemReady?: boolean;
		};
		APIResponse: {
			message?: string | null;
			errorMessage?: string | null;
			isError?: boolean;
		};
		V: {
			baseUrl?: string;
			name?: string;
			/** Format: int32 */
			id?: number;
			/** Format: int32 */
			streamGroupId?: number;
			streamGroupName?: string;
			/** Format: int32 */
			streamGroupProfileId?: number;
			streamGroupProfileName?: string;
			defaultRealUrl?: string;
			realUrl?: string;
		};
		CancelChannelRequest: {
			/** Format: int32 */
			smChannelId?: number;
		};
		CancelClientRequest: {
			uniqueRequestId?: string;
		};
		MoveToNextStreamRequest: {
			/** Format: int32 */
			smChannelId?: number;
		};
		SMChannelDto: components["schemas"]["SMChannel"] & {
			smStreamDtos?: components["schemas"]["SMStreamDto"][];
			smChannelDtos?: components["schemas"]["SMChannelDto"][];
			streamGroupIds?: number[];
			streamUrl?: string;
			/** Format: int32 */
			currentRank?: number;
			/** Format: int32 */
			rank?: number;
		};
		SMStreamDto: components["schemas"]["SMStream"] & {
			/** Format: int32 */
			rank?: number;
			realUrl?: string;
			channelMembership?: components["schemas"]["LogoInfo"][];
		};
		LogoInfo: {
			ext?: string;
			id?: string;
			name?: string;
			fileName?: string;
			isSchedulesDirect?: boolean;
			fullPath?: string;
			url?: string;
			isSVG?: boolean;
			smFileType?: components["schemas"]["SMFileTypes"];
		};
		/** @enum {integer} */
		SMFileTypes: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
		SMStream: {
			id?: string;
			clientUserAgent?: string | null;
			commandProfileName?: string | null;
			extInf?: string | null;
			/** Format: int32 */
			filePosition?: number;
			isHidden?: boolean;
			isUserCreated?: boolean;
			/** Format: int32 */
			m3UFileId?: number;
			/** Format: int32 */
			channelNumber?: number;
			m3UFileName?: string;
			group?: string;
			epgid?: string;
			logo?: string;
			name?: string;
			url?: string;
			stationId?: string;
			isSystem?: boolean;
			needsDelete?: boolean;
			channelName?: string;
			tvgName?: string;
			cuid?: string;
			channelId?: string;
			smStreamType?: components["schemas"]["SMStreamTypeEnum"];
		};
		SMChannel: {
			/** Format: int32 */
			id?: number;
			commandProfileName?: string;
			isHidden?: boolean;
			baseStreamID?: string;
			/** Format: int32 */
			channelNumber?: number;
			channelId?: string;
			tvgName?: string;
			channelName?: string;
			/** Format: int32 */
			timeShift?: number;
			group?: string;
			epgId?: string;
			logo?: string;
			name?: string;
			clientUserAgent?: string | null;
			stationId?: string;
			groupTitle?: string;
			isSystem?: boolean;
			smChannelType?: components["schemas"]["SMChannelTypeEnum"];
		};
		/** @enum {integer} */
		SMChannelTypeEnum: 0 | 1;
		AddSMChannelsToStreamGroupByParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
			/** Format: int32 */
			streamGroupId?: number;
		};
		QueryStringParameters: {
			/** Format: int32 */
			pageNumber?: number;
			/** Format: int32 */
			pageSize?: number;
			orderBy?: string;
			jsonArgumentString?: string | null;
			jsonFiltersString?: string | null;
		};
		AddSMChannelsToStreamGroupRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			smChannelIds?: number[];
		};
		AddSMChannelToStreamGroupRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			/** Format: int32 */
			smChannelId?: number;
		};
		RemoveSMChannelFromStreamGroupRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			/** Format: int32 */
			smChannelId?: number;
		};
		PagedResponseOfStreamGroupDto: components["schemas"]["DataResponseOfListOfStreamGroupDto"] & {
			/** Format: int32 */
			pageNumber: number;
			/** Format: int32 */
			pageSize: number;
			/** Format: int32 */
			totalPageCount: number;
			/** Format: int32 */
			first: number;
		};
		DataResponseOfListOfStreamGroupDto: components["schemas"]["APIResponse"] & {
			data: components["schemas"]["StreamGroupDto"][] | null;
			/** Format: int32 */
			totalItemCount: number;
			/** Format: int32 */
			count: number;
		};
		StreamGroupDto: components["schemas"]["StreamGroupBase"] & {
			streamGroupProfiles?: components["schemas"]["StreamGroupProfileDto"][];
			/** Format: int32 */
			channelCount?: number;
			autoSetChannelNumbers?: boolean;
			ignoreExistingChannelNumbers?: boolean;
			/** Format: int32 */
			startingChannelNumber?: number;
			shortM3ULink?: string;
			shortEPGLink?: string;
			m3ULink?: string;
			xmlLink?: string;
			hdhrLink?: string;
			shortHDHRLink?: string;
		};
		StreamGroupProfileDto: components["schemas"]["StreamGroupProfileLinks"] & {
			shortHDHRLink?: string;
			shortM3ULink?: string;
			shortEPGLink?: string;
		};
		StreamGroupProfileLinks: components["schemas"]["StreamGroupProfile"] & {
			xmlLink?: string;
			m3ULink?: string;
			hdhrLink?: string;
		};
		StreamGroupProfile: {
			/** Format: int32 */
			id?: number;
			/** Format: int32 */
			streamGroupId?: number;
			profileName?: string;
			outputProfileName?: string;
			commandProfileName?: string;
		};
		StreamGroupBase: components["schemas"]["BaseEntity"] & {
			deviceID?: string;
			isReadOnly?: boolean;
			/** Format: int32 */
			showIntros?: number;
			isSystem?: boolean;
			name?: string;
			groupKey?: string;
			createSTRM?: boolean;
		};
		BaseEntity: Record<string, never>;
		AddProfileToStreamGroupRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			profileName?: string;
			outputProfileName?: string;
			commandProfileName?: string;
		};
		CreateStreamGroupRequest: {
			name?: string;
			outputProfileName?: string | null;
			commandProfileName?: string | null;
			groupKey?: string | null;
			createSTRM?: boolean | null;
		};
		DeleteStreamGroupRequest: {
			/** Format: int32 */
			streamGroupId?: number;
		};
		RemoveStreamGroupProfileRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			profileName?: string;
		};
		UpdateStreamGroupProfileRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			profileName?: string;
			newProfileName?: string;
			outputProfileName?: string | null;
			commandProfileName?: string | null;
		};
		UpdateStreamGroupRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			groupKey?: string | null;
			newName?: string | null;
			deviceID?: string | null;
			createSTRM?: boolean | null;
		};
		ChannelMetric: {
			smStreamInfo: components["schemas"]["SMStreamInfo"] | null;
			clientStreams: components["schemas"]["ClientStreamsDto"][];
			metrics: components["schemas"]["StreamHandlerMetrics"];
			isFailed: boolean;
			name: string;
			id: string;
			sourceName: string;
			channelLogo: string | null;
			streamLogo: string | null;
			videoInfo: string | null;
		};
		ClientStreamsDto: {
			metrics: components["schemas"]["StreamHandlerMetrics"] | null;
			smStreamId: string;
			name: string;
			streamLogo: string | null;
			channelLogo: string | null;
			clientIPAddress: string | null;
			clientUserAgent: string | null;
			smChannelId: string;
		};
		SDSystemStatus: {
			isSystemReady?: boolean;
		};
		VideoInfo: {
			/** Format: date-time */
			created?: string;
			key?: string;
			streamName?: string;
			streamId?: string;
			jsonOutput?: string;
		};
		VideoInfoDto: components["schemas"]["VideoInfo"] & Record<string, never>;
		SMTask: {
			/** Format: int32 */
			id?: number;
			isRunning?: boolean;
			command?: string;
			/** Format: date-time */
			queueTS?: string;
			/** Format: date-time */
			startTS?: string;
			/** Format: date-time */
			stopTS?: string;
			status?: string;
		};
		SendSMTasksRequest: {
			smTasks?: components["schemas"]["SMTask"][];
		};
		PagedResponseOfSMStreamDto: components["schemas"]["DataResponseOfListOfSMStreamDto"] & {
			/** Format: int32 */
			pageNumber: number;
			/** Format: int32 */
			pageSize: number;
			/** Format: int32 */
			totalPageCount: number;
			/** Format: int32 */
			first: number;
		};
		DataResponseOfListOfSMStreamDto: components["schemas"]["APIResponse"] & {
			data: components["schemas"]["SMStreamDto"][] | null;
			/** Format: int32 */
			totalItemCount: number;
			/** Format: int32 */
			count: number;
		};
		CreateSMStreamRequest: {
			name?: string;
			/** Format: int32 */
			channelNumber?: number | null;
			group?: string | null;
			logo?: string | null;
			epgid?: string | null;
			commandProfileName?: string | null;
			url?: string;
		};
		DeleteSMStreamRequest: {
			smStreamId?: string;
		};
		SetSMStreamsVisibleByIdRequest: {
			ids?: string[];
			isHidden?: boolean;
		};
		ToggleSMStreamsVisibleByIdRequest: {
			ids?: string[];
		};
		ToggleSMStreamVisibleByIdRequest: {
			id?: string;
		};
		ToggleSMStreamVisibleByParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
		};
		UpdateSMStreamRequest: {
			smStreamId?: string;
			name?: string | null;
			/** Format: int32 */
			channelNumber?: number | null;
			group?: string | null;
			logo?: string | null;
			epgid?: string | null;
			commandProfileName?: string | null;
			url?: string;
		};
		SendSMErrorRequest: {
			detail?: string;
			summary?: string;
		};
		SendSMInfoRequest: {
			detail?: string;
			summary?: string;
		};
		SendSMMessageRequest: {
			message?: components["schemas"]["SMMessage"];
		};
		SMMessage: {
			severity?: string;
			summary?: string;
			detail?: string | null;
		};
		SendSMWarnRequest: {
			detail?: string;
			summary?: string;
		};
		SendSuccessRequest: {
			detail?: string;
			summary?: string;
		};
		AddSMStreamToSMChannelRequest: {
			/** Format: int32 */
			smChannelId?: number;
			smStreamId?: string;
			/** Format: int32 */
			rank?: number | null;
		};
		RemoveSMStreamFromSMChannelRequest: {
			/** Format: int32 */
			smChannelId?: number;
			smStreamId?: string;
		};
		SetSMStreamRanksRequest: {
			requests?: components["schemas"]["SMChannelStreamRankRequest"][];
		};
		SMChannelStreamRankRequest: {
			/** Format: int32 */
			smChannelId?: number;
			smStreamId?: string;
			/** Format: int32 */
			rank?: number;
		};
		PagedResponseOfSMChannelDto: components["schemas"]["DataResponseOfListOfSMChannelDto"] & {
			/** Format: int32 */
			pageNumber: number;
			/** Format: int32 */
			pageSize: number;
			/** Format: int32 */
			totalPageCount: number;
			/** Format: int32 */
			first: number;
		};
		DataResponseOfListOfSMChannelDto: components["schemas"]["APIResponse"] & {
			data: components["schemas"]["SMChannelDto"][] | null;
			/** Format: int32 */
			totalItemCount: number;
			/** Format: int32 */
			count: number;
		};
		AutoSetEPGFromParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
		};
		AutoSetEPGRequest: {
			ids?: number[];
		};
		AutoSetSMChannelNumbersFromParametersRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			parameters?: components["schemas"]["QueryStringParameters"];
			/** Format: int32 */
			startingNumber?: number | null;
			overwriteExisting?: boolean | null;
		};
		AutoSetSMChannelNumbersRequest: {
			/** Format: int32 */
			streamGroupId?: number;
			smChannelIds?: number[];
			/** Format: int32 */
			startingNumber?: number | null;
			overwriteExisting?: boolean | null;
		};
		CopySMChannelRequest: {
			/** Format: int32 */
			smChannelId?: number;
			newName?: string;
		};
		CreateMultiViewChannelRequest: {
			name?: string;
			smsChannelIds?: number[] | null;
			streamGroup?: string | null;
			/** Format: int32 */
			channelNumber?: number | null;
			group?: string | null;
			epgId?: string | null;
			logo?: string | null;
		};
		CreateSMChannelRequest: {
			name?: string;
			smStreamsIds?: string[] | null;
			commandProfileName?: string | null;
			clientUserAgent?: string | null;
			/** Format: int32 */
			channelNumber?: number | null;
			/** Format: int32 */
			timeShift?: number | null;
			group?: string | null;
			epgId?: string | null;
			stationId?: string | null;
			logo?: string | null;
		};
		CreateSMChannelsFromStreamParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
			defaultStreamGroupName?: string | null;
			/** Format: int32 */
			m3UFileId?: number;
			/** Format: int32 */
			streamGroupId?: number | null;
		};
		CreateSMChannelsFromStreamsRequest: {
			streamIds?: string[];
			/** Format: int32 */
			streamGroupId?: number | null;
		};
		DeleteSMChannelRequest: {
			/** Format: int32 */
			smChannelId?: number;
		};
		DeleteSMChannelsFromParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
		};
		DeleteSMChannelsRequest: {
			smChannelIds?: number[];
		};
		SetSMChannelEPGIdRequest: {
			/** Format: int32 */
			smChannelId?: number;
			epgId?: string;
		};
		SetSMChannelGroupRequest: {
			/** Format: int32 */
			smChannelId?: number;
			group?: string;
		};
		SetSMChannelLogoRequest: {
			/** Format: int32 */
			smChannelId?: number;
			logo?: string;
		};
		SetSMChannelNameRequest: {
			/** Format: int32 */
			smChannelId?: number;
			name?: string;
		};
		SetSMChannelNumberRequest: {
			/** Format: int32 */
			smChannelId?: number;
			/** Format: int32 */
			channelNumber?: number;
		};
		SetSMChannelsGroupFromParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
			group?: string;
		};
		SetSMChannelsGroupRequest: {
			smChannelIds?: number[];
			group?: string;
		};
		SetSMChannelsLogoFromEPGFromParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
		};
		SetSMChannelsLogoFromEPGRequest: {
			ids?: number[];
		};
		SetSMChannelsCommandProfileNameFromParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
			commandProfileName?: string;
		};
		SetSMChannelsCommandProfileNameRequest: {
			smChannelIds?: number[];
			commandProfileName?: string;
		};
		SetSMChannelCommandProfileNameRequest: {
			/** Format: int32 */
			smChannelId?: number;
			commandProfileName?: string;
		};
		ToggleSMChannelsVisibleByIdRequest: {
			ids?: number[];
		};
		ToggleSMChannelVisibleByIdRequest: {
			/** Format: int32 */
			id?: number;
		};
		ToggleSMChannelVisibleByParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
		};
		UpdateMultiViewChannelRequest: {
			/** Format: int32 */
			id?: number;
			name?: string | null;
			smChannelIds?: number[] | null;
			/** Format: int32 */
			channelNumber?: number | null;
			group?: string | null;
			epgId?: string | null;
			logo?: string | null;
		};
		UpdateSMChannelRequest: {
			/** Format: int32 */
			id?: number;
			name?: string | null;
			clientUserAgent?: string | null;
			smStreamsIds?: string[] | null;
			commandProfileName?: string | null;
			/** Format: int32 */
			channelNumber?: number | null;
			/** Format: int32 */
			timeShift?: number | null;
			group?: string | null;
			epgId?: string | null;
			logo?: string | null;
			stationId?: string | null;
			videoStreamHandler?: components["schemas"]["VideoStreamHandlers"] | null;
		};
		/** @enum {integer} */
		VideoStreamHandlers: 0 | 1 | 2;
		AddSMChannelToSMChannelRequest: {
			/** Format: int32 */
			parentSMChannelId?: number;
			/** Format: int32 */
			childSMChannelId?: number;
			/** Format: int32 */
			rank?: number | null;
		};
		RemoveSMChannelFromSMChannelRequest: {
			/** Format: int32 */
			parentSMChannelId?: number;
			/** Format: int32 */
			childSMChannelId?: number;
		};
		SetSMChannelRanksRequest: {
			requests?: components["schemas"]["SMChannelChannelRankRequest"][];
		};
		SMChannelChannelRankRequest: {
			/** Format: int32 */
			parentSMChannelId?: number;
			/** Format: int32 */
			childSMChannelId?: number;
			/** Format: int32 */
			rank?: number;
		};
		SettingDto: components["schemas"]["StreamSettings"] & {
			sdSettings?: components["schemas"]["SDSettings"];
			release?: string;
			version?: string;
			isDebug?: boolean;
		};
		SDSettings: {
			/** Format: int32 */
			maxSubscribedLineups?: number;
			alternateSEFormat?: boolean;
			alternateLogoStyle?: string;
			/** Format: date-time */
			tokenErrorTimestamp?: string;
			artworkSize?: string;
			excludeCastAndCrew?: boolean;
			preferredLogoStyle?: string;
			prefixEpisodeTitle?: boolean;
			appendEpisodeDesc?: boolean;
			prefixEpisodeDescription?: boolean;
			episodeAppendProgramDescription?: boolean;
			sdEnabled?: boolean;
			/** Format: int32 */
			sdepgDays?: number;
			sdCountry?: string;
			sdPassword?: string;
			sdPostalCode?: string;
			sdStationIds?: components["schemas"]["StationIdLineup"][];
			headendsToView?: components["schemas"]["HeadendToView"][];
			sdUserName?: string;
			movieImages?: boolean;
			seasonImages?: boolean;
			seriesImages?: boolean;
			sportsImages?: boolean;
			episodeImages?: boolean;
			seriesPosterAspect?: string;
			moviePosterAspect?: string;
			xmltvAddFillerData?: boolean;
			/** Format: int32 */
			xmltvFillerProgramLength?: number;
			xmltvExtendedInfoInTitleDescriptions?: boolean;
			xmltvIncludeChannelNumbers?: boolean;
			xmltvSingleImage?: boolean;
			/** Format: date-time */
			sdTooManyRequestsSuspend?: string;
		};
		StationIdLineup: {
			lineup?: string;
			stationId?: string;
			id?: string;
		};
		HeadendToView: {
			id?: string;
			country?: string;
			postalCode?: string;
		};
		StreamSettings: components["schemas"]["BaseSettings"] & {
			defaultCommandProfileName?: string;
			defaultOutputProfileName?: string;
			/** Format: int32 */
			streamReadTimeOutMs?: number;
			/** Format: int32 */
			streamStartTimeoutMs?: number;
			/** Format: int32 */
			clientReadTimeoutMs?: number;
			/** Format: int32 */
			streamRetryLimit?: number;
			/** Format: int32 */
			streamRetryHours?: number;
			/** Format: int32 */
			streamShutDownDelayMs?: number;
			ffmPegExecutable?: string;
			ffProbeExecutable?: string;
		};
		BaseSettings: {
			debugAPI?: boolean;
			deleteOldSTRMFiles?: boolean;
			strmBaseURL?: string;
			apiKey?: string;
			adminPassword?: string;
			adminUserName?: string;
			authenticationMethod?: string;
			autoSetEPG?: boolean;
			backupEnabled?: boolean;
			/** Format: int32 */
			backupInterval?: number;
			/** Format: int32 */
			backupVersionsToKeep?: number;
			cleanURLs?: boolean;
			clientUserAgent?: string;
			defaultCompression?: string;
			defaultLogo?: string;
			deviceID?: string;
			enableDBDebug?: boolean;
			enableSSL?: boolean;
			/** Format: int32 */
			globalStreamLimit?: number;
			/** Format: int32 */
			iconCacheExpirationDays?: number;
			logoCache?: boolean;
			useChannelLogoForProgramLogo?: boolean;
			m3U8OutPutProfile?: string;
			/** Format: int32 */
			maxConcurrentDownloads?: number;
			/** Format: int32 */
			maxConnectRetry?: number;
			/** Format: int32 */
			maxConnectRetryTimeMS?: number;
			/** Format: int32 */
			maxLogFileSizeMB?: number;
			/** Format: int32 */
			maxLogFiles?: number;
			/** Format: int32 */
			maxStreamReStart?: number;
			nameRegex?: string[];
			prettyEPG?: boolean;
			showClientHostNames?: boolean;
			showMessageVideos?: boolean;
			showIntros?: string;
			sslCertPassword?: string;
			sslCertPath?: string;
			uiFolder?: string;
			videoStreamAlwaysUseEPGLogo?: boolean;
		};
		UpdateSettingResponse: {
			needsLogOut?: boolean;
			settings?: components["schemas"]["SettingDto"] | null;
		};
		UpdateSettingRequest: {
			parameters?: components["schemas"]["UpdateSettingParameters"];
		};
		UpdateSettingParameters: {
			strmBaseURL?: string | null;
			autoSetEPG?: boolean | null;
			backupEnabled?: boolean | null;
			/** Format: int32 */
			backupVersionsToKeep?: number | null;
			/** Format: int32 */
			backupInterval?: number | null;
			debugAPI?: boolean | null;
			useChannelLogoForProgramLogo?: boolean | null;
			sdSettings?: components["schemas"]["SDSettingsRequest"] | null;
			deleteOldSTRMFiles?: boolean | null;
			showClientHostNames?: boolean | null;
			/** Format: int32 */
			iconCacheExpirationDays?: number | null;
			defaultCompression?: string | null;
			m3U8OutPutProfile?: string | null;
			adminPassword?: string | null;
			adminUserName?: string | null;
			/** Format: int32 */
			streamReadTimeOutMs?: number | null;
			/** Format: int32 */
			streamStartTimeoutMs?: number | null;
			/** Format: int32 */
			clientReadTimeoutMs?: number | null;
			/** Format: int32 */
			streamRetryLimit?: number | null;
			/** Format: int32 */
			streamShutDownDelayMs?: number | null;
			/** Format: int32 */
			streamRetryHours?: number | null;
			authenticationMethod?: string | null;
			logoCache?: boolean | null;
			cleanURLs?: boolean | null;
			clientUserAgent?: string | null;
			deviceID?: string | null;
			enableSSL?: boolean | null;
			showMessageVideos?: boolean | null;
			ffmPegExecutable?: string | null;
			ffProbeExecutable?: string | null;
			/** Format: int32 */
			globalStreamLimit?: number | null;
			prettyEPG?: boolean | null;
			showIntros?: string | null;
			/** Format: int32 */
			maxConnectRetry?: number | null;
			/** Format: int32 */
			maxConnectRetryTimeMS?: number | null;
			sslCertPassword?: string | null;
			sslCertPath?: string | null;
			defaultOutputProfileName?: string | null;
			defaultCommandProfileName?: string | null;
			/** Format: int32 */
			maxLogFiles?: number | null;
			/** Format: int32 */
			maxLogFileSizeMB?: number | null;
			nameRegex?: string[] | null;
		};
		SDSettingsRequest: {
			preferredLogoStyle?: string | null;
			alternateLogoStyle?: string | null;
			seriesPosterAspect?: string | null;
			artworkSize?: string | null;
			excludeCastAndCrew?: boolean | null;
			alternateSEFormat?: boolean | null;
			prefixEpisodeDescription?: boolean | null;
			prefixEpisodeTitle?: boolean | null;
			appendEpisodeDesc?: boolean | null;
			/** Format: int32 */
			sdepgDays?: number | null;
			sdEnabled?: boolean | null;
			sdUserName?: string | null;
			sdCountry?: string | null;
			sdPassword?: string | null;
			sdPostalCode?: string | null;
			headendsToView?: components["schemas"]["HeadendToView"][] | null;
			sdStationIds?: components["schemas"]["StationIdLineup"][] | null;
			seasonImages?: boolean | null;
			sportsImages?: boolean | null;
			seriesImages?: boolean | null;
			xmltvAddFillerData?: boolean | null;
			/** Format: int32 */
			xmltvFillerProgramLength?: number | null;
			/** Format: int32 */
			maxSubscribedLineups?: number | null;
			xmltvIncludeChannelNumbers?: boolean | null;
			xmltvExtendedInfoInTitleDescriptions?: boolean | null;
			xmltvSingleImage?: boolean | null;
		};
		CountryData: {
			id?: string | null;
			key?: string | null;
			countries?: components["schemas"]["Country"][] | null;
		};
		Country: {
			fullName?: string;
			shortName?: string;
			postalCodeExample?: string;
			postalCode?: string;
			onePostalCode?: boolean;
		};
		HeadendDto: {
			id?: string;
			headendId?: string;
			lineup?: string;
			location?: string;
			name?: string;
			transport?: string;
			country?: string;
			postCode?: string;
		};
		LineupPreviewChannel: {
			/** Format: int32 */
			id?: number;
			channel?: string;
			name?: string;
			callsign?: string;
			affiliate?: string;
		};
		StationChannelName: {
			id?: string;
			channel?: string;
			channelName?: string;
			displayName?: string;
			logo?: string;
			/** Format: int32 */
			epgNumber?: number;
		};
		StationPreview: {
			logo?: components["schemas"]["Logo"] | null;
			affiliate?: string | null;
			callsign?: string | null;
			id?: string | null;
			lineup?: string | null;
			name?: string | null;
			stationId?: string | null;
			country?: string | null;
			postalCode?: string | null;
		};
		Logo: {
			URL?: string;
			/** Format: int32 */
			height?: number;
			/** Format: int32 */
			width?: number;
			md5?: string | null;
			source?: string;
			category?: string;
		};
		SubscribedLineup: {
			id?: string;
			lineup?: string;
			name?: string;
			transport?: string;
			location?: string;
			uri?: string;
			isDeleted?: boolean;
		};
		AddHeadendToViewRequest: {
			headendId?: string;
			country?: string;
			postal?: string;
		};
		AddLineupRequest: {
			lineup?: string;
		};
		AddStationRequest: {
			requests?: components["schemas"]["StationRequest"][];
		};
		StationRequest: {
			stationId?: string;
			lineup?: string;
		};
		RemoveHeadendToViewRequest: {
			headendId?: string;
			country?: string;
			postal?: string;
		};
		RemoveLineupRequest: {
			lineup?: string;
		};
		RemoveStationRequest: {
			requests?: components["schemas"]["StationRequest"][];
		};
		SetStationsRequest: {
			requests?: components["schemas"]["StationRequest"][];
		};
		OutputProfileDto: components["schemas"]["OutputProfile"] & {
			profileName?: string;
		};
		OutputProfile: {
			isReadOnly?: boolean;
			enableIcon?: boolean;
			enableGroupTitle?: boolean;
			enableChannelNumber?: boolean;
			id?: string;
			name?: string;
			group?: string;
		};
		AddCommandProfileRequest: {
			profileName?: string;
			command?: string;
			parameters?: string;
		};
		AddOutputProfileRequest: {
			outputProfileDto?: components["schemas"]["OutputProfileDto"];
		};
		RemoveCommandProfileRequest: {
			profileName?: string;
		};
		RemoveOutputProfileRequest: {
			name?: string;
		};
		UpdateCommandProfileRequest: {
			profileName?: string;
			newProfileName?: string | null;
			command?: string | null;
			parameters?: string | null;
		};
		UpdateOutputProfileRequest: components["schemas"]["OutputProfileRequest"] & {
			profileName?: string;
			newName?: string | null;
		};
		OutputProfileRequest: {
			enableIcon?: boolean | null;
			enableGroupTitle?: boolean | null;
			enableChannelNumber?: boolean | null;
			id?: string | null;
			name?: string | null;
			group?: string | null;
		};
		M3UFileDto: components["schemas"]["BaseFileDto"] & {
			m3U8OutPutProfile: string;
			m3UName: components["schemas"]["M3UField"];
			m3UKey: components["schemas"]["M3UKey"];
			syncChannels: boolean;
			vodTags: string[];
			defaultStreamGroupName: string | null;
			/** Format: int32 */
			maxStreamCount: number;
			/** Format: int32 */
			streamCount: number;
			/** Format: int32 */
			startingChannelNumber: number;
			autoSetChannelNumbers: boolean;
		};
		/** @enum {integer} */
		M3UField: 0 | 1 | 2 | 3 | 4 | 5 | 6;
		/** @enum {integer} */
		M3UKey: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
		BaseFileDto: {
			source: string;
			autoUpdate: boolean;
			description: string;
			/** Format: int32 */
			downloadErrors: number;
			/** Format: int32 */
			hoursToUpdate: number;
			/** Format: int32 */
			id: number;
			/** Format: date-time */
			lastDownloadAttempt: string;
			/** Format: date-time */
			lastDownloaded: string;
			name: string;
			needsUpdate: boolean;
			url: string;
		};
		PagedResponseOfM3UFileDto: components["schemas"]["DataResponseOfListOfM3UFileDto"] & {
			/** Format: int32 */
			pageNumber: number;
			/** Format: int32 */
			pageSize: number;
			/** Format: int32 */
			totalPageCount: number;
			/** Format: int32 */
			first: number;
		};
		DataResponseOfListOfM3UFileDto: components["schemas"]["APIResponse"] & {
			data: components["schemas"]["M3UFileDto"][] | null;
			/** Format: int32 */
			totalItemCount: number;
			/** Format: int32 */
			count: number;
		};
		CreateM3UFileRequest: {
			name?: string;
			/** Format: int32 */
			maxStreamCount?: number | null;
			m3U8OutPutProfile?: string | null;
			m3UKey?: components["schemas"]["M3UKey"] | null;
			m3UName?: components["schemas"]["M3UField"] | null;
			defaultStreamGroupName?: string | null;
			urlSource?: string | null;
			syncChannels?: boolean | null;
			/** Format: int32 */
			hoursToUpdate?: number | null;
			/** Format: int32 */
			startingChannelNumber?: number | null;
			autoSetChannelNumbers?: boolean | null;
			vodTags?: string[] | null;
		};
		DeleteM3UFileRequest: {
			deleteFile?: boolean;
			/** Format: int32 */
			id?: number;
		};
		ProcessM3UFileRequest: {
			/** Format: int32 */
			m3UFileId?: number;
			forceRun?: boolean;
		};
		RefreshM3UFileRequest: {
			/** Format: int32 */
			id?: number;
			forceRun?: boolean;
		};
		SyncChannelsRequest: {
			/** Format: int32 */
			m3UFileId?: number;
			group?: string | null;
		};
		UpdateM3UFileRequest: {
			/** Format: int32 */
			maxStreamCount?: number | null;
			/** Format: int32 */
			startingChannelNumber?: number | null;
			defaultStreamGroupName?: string | null;
			syncChannels?: boolean | null;
			vodTags?: string[] | null;
			autoSetChannelNumbers?: boolean | null;
			autoUpdate?: boolean | null;
			/** Format: int32 */
			hoursToUpdate?: number | null;
			/** Format: int32 */
			id?: number;
			name?: string | null;
			url?: string | null;
			m3U8OutPutProfile?: string | null;
			m3UName?: components["schemas"]["M3UField"] | null;
		};
		CustomLogoDto: components["schemas"]["CustomLogo"] & {
			source?: string;
		};
		CustomLogo: {
			name?: string;
			isReadOnly?: boolean;
			value?: string;
			/** Format: int32 */
			fileId?: number;
		};
		LogoDto: {
			contentType?: string;
			fileName?: string;
			url?: string;
			/** Format: byte */
			image?: string;
		};
		AddCustomLogoRequest: {
			name?: string;
			source?: string;
		};
		RemoveCustomLogoRequest: {
			source?: string;
		};
		SetTestTaskRequest: {
			/** Format: int32 */
			delayInSeconds?: number;
		};
		EPGFilePreviewDto: {
			id?: string;
			channelLogo?: string;
			channelName?: string;
		};
		EPGFileDto: components["schemas"]["BaseFileDto"] & {
			/** Format: int32 */
			timeShift: number;
			/** Format: int32 */
			epgNumber: number;
			color: string;
			/** Format: int32 */
			channelCount: number;
			/** Format: date-time */
			epgStartDate: string;
			/** Format: date-time */
			epgStopDate: string;
			/** Format: int32 */
			programmeCount: number;
		};
		PagedResponseOfEPGFileDto: components["schemas"]["DataResponseOfListOfEPGFileDto"] & {
			/** Format: int32 */
			pageNumber: number;
			/** Format: int32 */
			pageSize: number;
			/** Format: int32 */
			totalPageCount: number;
			/** Format: int32 */
			first: number;
		};
		DataResponseOfListOfEPGFileDto: components["schemas"]["APIResponse"] & {
			data: components["schemas"]["EPGFileDto"][] | null;
			/** Format: int32 */
			totalItemCount: number;
			/** Format: int32 */
			count: number;
		};
		CreateEPGFileRequest: {
			name?: string;
			fileName?: string;
			/** Format: int32 */
			epgNumber?: number;
			/** Format: int32 */
			timeShift?: number | null;
			/** Format: int32 */
			hoursToUpdate?: number | null;
			urlSource?: string | null;
			color?: string | null;
		};
		DeleteEPGFileRequest: {
			deleteFile?: boolean;
			/** Format: int32 */
			id?: number;
		};
		ProcessEPGFileRequest: {
			/** Format: int32 */
			id?: number;
		};
		RefreshEPGFileRequest: {
			/** Format: int32 */
			id?: number;
		};
		UpdateEPGFileRequest: {
			/** Format: int32 */
			epgNumber?: number | null;
			color?: string | null;
			/** Format: int32 */
			timeShift?: number | null;
			autoUpdate?: boolean | null;
			/** Format: int32 */
			hoursToUpdate?: number | null;
			/** Format: int32 */
			id?: number;
			name?: string | null;
			url?: string | null;
		};
		EPGColorDto: {
			/** Format: int32 */
			id?: number;
			/** Format: int32 */
			epgNumber?: number;
			stationId?: string;
			color?: string;
		};
		CustomPlayList: {
			name?: string;
			logo?: string;
			folderNfo?: components["schemas"]["Movie"] | null;
			customStreamNfos?: components["schemas"]["CustomStreamNfo"][];
		};
		Movie: {
			title?: string;
			originaltitle?: string | null;
			sorttitle?: string | null;
			ratings?: components["schemas"]["Ratings"] | null;
			rating?: string | null;
			criticrating?: string | null;
			userrating?: string | null;
			top250?: string | null;
			outline?: string | null;
			plot?: string | null;
			tagline?: string | null;
			/** Format: int32 */
			runtime?: number;
			thumb?: components["schemas"]["Thumb"] | null;
			fanart?: components["schemas"]["Fanart"] | null;
			mpaa?: string | null;
			playcount?: string | null;
			lastplayed?: string | null;
			id?: string | null;
			uniqueids?: components["schemas"]["Uniqueid"][] | null;
			genres?: string[] | null;
			country?: string | null;
			set?: components["schemas"]["Set"] | null;
			status?: string | null;
			premiered?: string;
			year?: string | null;
			studio?: string | null;
			watched?: string | null;
			fileinfo?: components["schemas"]["Fileinfo"] | null;
			actors?: components["schemas"]["Actor"][] | null;
			credits?: string[] | null;
			directors?: string[] | null;
			trailers?: string[] | null;
			artworks?: string[] | null;
		};
		Ratings: {
			rating?: components["schemas"]["Rating"][] | null;
		};
		Rating: {
			value?: string;
			votes?: string | null;
			name?: string | null;
			max?: string | null;
			default?: string | null;
		};
		Thumb: {
			aspect?: string | null;
			preview?: string | null;
			text?: string | null;
		};
		Fanart: {
			thumb?: components["schemas"]["Thumb"] | null;
		};
		Uniqueid: {
			type?: string | null;
			default?: string | null;
			text?: string | null;
		};
		Set: {
			name?: string | null;
			overview?: string | null;
		};
		Fileinfo: {
			streamdetails?: components["schemas"]["Streamdetails"] | null;
		};
		Streamdetails: {
			video?: components["schemas"]["Video"] | null;
			audio?: components["schemas"]["Audio"] | null;
			subtitle?: components["schemas"]["Subtitle"] | null;
		};
		Video: {
			aspect?: string | null;
			bitrate?: string | null;
			codec?: string | null;
			framerate?: string | null;
			height?: string | null;
			scantype?: string | null;
			width?: string | null;
			duration?: string | null;
			durationinseconds?: string | null;
		};
		Audio: {
			bitrate?: string | null;
			channels?: string | null;
			codec?: string | null;
			language?: string | null;
		};
		Subtitle: {
			language?: string | null;
		};
		Actor: {
			name?: string;
			role?: string | null;
			order?: string | null;
			thumb?: string | null;
		};
		CustomStreamNfo: {
			videoFileName?: string;
			movie?: components["schemas"]["Movie"];
		};
		ChannelGroupDto: components["schemas"]["ChannelGroup"] &
			Record<string, never>;
		ChannelGroup: components["schemas"]["BaseEntity"] & {
			isSystem?: boolean;
			isHidden?: boolean;
			isReadOnly?: boolean;
			name?: string;
			regexMatch?: string;
			/** Format: int32 */
			activeCount?: number;
			/** Format: int32 */
			totalCount?: number;
			/** Format: int32 */
			hiddenCount?: number;
		};
		PagedResponseOfChannelGroupDto: components["schemas"]["DataResponseOfListOfChannelGroupDto"] & {
			/** Format: int32 */
			pageNumber: number;
			/** Format: int32 */
			pageSize: number;
			/** Format: int32 */
			totalPageCount: number;
			/** Format: int32 */
			first: number;
		};
		DataResponseOfListOfChannelGroupDto: components["schemas"]["APIResponse"] & {
			data: components["schemas"]["ChannelGroupDto"][] | null;
			/** Format: int32 */
			totalItemCount: number;
			/** Format: int32 */
			count: number;
		};
		CreateChannelGroupRequest: {
			groupName?: string;
			isReadOnly?: boolean;
		};
		DeleteAllChannelGroupsFromParametersRequest: {
			parameters?: components["schemas"]["QueryStringParameters"];
		};
		DeleteChannelGroupRequest: {
			/** Format: int32 */
			channelGroupId?: number;
		};
		DeleteChannelGroupsRequest: {
			channelGroupIds?: number[];
		};
		UpdateChannelGroupRequest: {
			/** Format: int32 */
			channelGroupId?: number;
			newGroupName?: string | null;
			isHidden?: boolean | null;
			toggleVisibility?: boolean | null;
		};
		UpdateChannelGroupsRequest: {
			updateChannelGroupRequests?: components["schemas"]["UpdateChannelGroupRequest"][];
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	APIKeys_GetKeys: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	APIKeys_CreateKey: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateAPIKeyRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	APIKeys_RevokeKey: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Devices_GetDevices: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Devices_RevokeDevice: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Files_GetLogo: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				source: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Files_GetSMFS: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				APIKey: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						[key: string]: components["schemas"]["SGFS"];
					};
				};
			};
		};
	};
	Files_GetSMFS2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				APIKey: string;
				isShort: boolean | null;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						[key: string]: components["schemas"]["SGFS"];
					};
				};
			};
		};
	};
	Files_GetSMFS3: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				APIKey: string;
				encodedIds: string | null;
				isShort: boolean | null;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						[key: string]: components["schemas"]["SGFS"];
					};
				};
			};
		};
	};
	Files_GetSMChannelLogo: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				smChannelId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Files_GetProgramLogo: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				source: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Files_GetCustomLogo: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				source: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Files_GetTvLogo: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				source: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Misc_GetDownloadServiceStatus: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ImageDownloadServiceStatus"];
				};
			};
		};
	};
	Misc_GetChannelDiGetChannelDistributors: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SourceBroadcaster"][];
				};
			};
		};
	};
	Misc_CacheSIcons: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Misc_GetTestM3U: {
		parameters: {
			query?: {
				numberOfStreams?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Misc_GetTestEPG: {
		parameters: {
			query?: {
				NumberOfChannels?: number;
				NumberOfDays?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Misc_Backup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupCapability: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupCapability2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupCapability3: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupDiscover: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupLineup: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupLineupStatus: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupEPG: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupEPG2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupM3U: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetStreamGroupM3U2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Ss_GetAutoStream: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				streamGroupProfileId: number;
				channelNumber: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Test_ScanDirectoryForM3UFiles: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Test_ScanForTvLogos: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Test_SetSystemReady: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetIsSystemReadyRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Test_UpdateChannelGroupCountsRequest: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleStreamRequestGET: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedIds: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleStreamRequestHEAD: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedIds: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleStreamRequestGET2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedIds: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleStreamRequestHEAD2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedIds: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleStreamRequestGET3: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				smChannelId: number;
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleStreamRequestHEAD3: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				smChannelId: number;
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleStreamRequestGET4: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				smChannelId: number;
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleStreamRequestHEAD4: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				smChannelId: number;
				streamGroupProfileId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleSStreamRequestGET: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedStreamLocation: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleSStreamRequestHEAD: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedStreamLocation: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleSStreamRequestGET2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedStreamLocation: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Vs_HandleSStreamRequestHEAD2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedStreamLocation: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	WebSocket_TriggerReload: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Vs_GetVs: {
		parameters: {
			query?: {
				StreamGroupId?: number | null;
				StreamGroupProfileId?: number | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["V"][];
				};
			};
		};
	};
	Streaming_CancelAllChannels: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Streaming_CancelChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CancelChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Streaming_CancelClient: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CancelClientRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Streaming_MoveToNextStream: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["MoveToNextStreamRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroupSMChannelLinks_GetStreamGroupSMChannels: {
		parameters: {
			query?: {
				StreamGroupId?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SMChannelDto"][];
				};
			};
		};
	};
	StreamGroupSMChannelLinks_AddSMChannelsToStreamGroupByParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddSMChannelsToStreamGroupByParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroupSMChannelLinks_AddSMChannelsToStreamGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddSMChannelsToStreamGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroupSMChannelLinks_AddSMChannelToStreamGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddSMChannelToStreamGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroupSMChannelLinks_RemoveSMChannelFromStreamGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveSMChannelFromStreamGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroups_GetPagedStreamGroups: {
		parameters: {
			query?: {
				PageNumber?: number;
				PageSize?: number;
				OrderBy?: string;
				JSONArgumentString?: string | null;
				JSONFiltersString?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PagedResponseOfStreamGroupDto"];
				};
			};
		};
	};
	StreamGroups_GetStreamGroupProfiles: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StreamGroupProfile"][];
				};
			};
		};
	};
	StreamGroups_GetStreamGroup: {
		parameters: {
			query?: {
				SGName?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StreamGroupDto"];
				};
			};
		};
	};
	StreamGroups_GetStreamGroups: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StreamGroupDto"][];
				};
			};
		};
	};
	StreamGroups_AddProfileToStreamGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddProfileToStreamGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroups_CreateStreamGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateStreamGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroups_DeleteStreamGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteStreamGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroups_RemoveStreamGroupProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveStreamGroupProfileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroups_UpdateStreamGroupProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateStreamGroupProfileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroups_UpdateStreamGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateStreamGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	StreamGroups_GetStreamGroupCapability: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	StreamGroups_GetStreamGroupCapability2: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	StreamGroups_GetStreamGroupCapability3: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	StreamGroups_GetStreamGroupDiscover: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	StreamGroups_GetStreamGroupEPG: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	StreamGroups_GetStreamGroupLineup: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	StreamGroups_GetStreamGroupLineupStatus: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	StreamGroups_GetStreamGroupM3U: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	StreamGroups_GetAutoStream: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				encodedId: string;
				channelNumber: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/octet-stream": string;
				};
			};
		};
	};
	Statistics_GetChannelMetrics: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ChannelMetric"][];
				};
			};
		};
	};
	Statistics_GetDownloadServiceStatus: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ImageDownloadServiceStatus"];
				};
			};
		};
	};
	Statistics_GetIsSystemReady: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": boolean;
				};
			};
		};
	};
	Statistics_GetStreamConnectionMetricData: {
		parameters: {
			query?: {
				Id?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StreamConnectionMetricData"];
				};
			};
		};
	};
	Statistics_GetStreamConnectionMetricDatas: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StreamConnectionMetricData"][];
				};
			};
		};
	};
	Statistics_GetSystemStatus: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SDSystemStatus"];
				};
			};
		};
	};
	Statistics_GetTaskIsRunning: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": boolean;
				};
			};
		};
	};
	Statistics_GetVideoInfo: {
		parameters: {
			query?: {
				SMStreamId?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VideoInfo"];
				};
			};
		};
	};
	Statistics_GetVideoInfos: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VideoInfoDto"][];
				};
			};
		};
	};
	SMTasks_GetSMTasks: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SMTask"][];
				};
			};
		};
	};
	SMTasks_SendSMTasks: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SendSMTasksRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMStreams_GetPagedSMStreams: {
		parameters: {
			query?: {
				PageNumber?: number;
				PageSize?: number;
				OrderBy?: string;
				JSONArgumentString?: string | null;
				JSONFiltersString?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PagedResponseOfSMStreamDto"];
				};
			};
		};
	};
	SMStreams_CreateSMStream: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateSMStreamRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMStreams_DeleteSMStream: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteSMStreamRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMStreams_SetSMStreamsVisibleById: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMStreamsVisibleByIdRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMStreams_ToggleSMStreamsVisibleById: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ToggleSMStreamsVisibleByIdRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMStreams_ToggleSMStreamVisibleById: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ToggleSMStreamVisibleByIdRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMStreams_ToggleSMStreamVisibleByParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ToggleSMStreamVisibleByParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMStreams_UpdateSMStream: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateSMStreamRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMMessages_SendSMError: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SendSMErrorRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMMessages_SendSMInfo: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SendSMInfoRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMMessages_SendSMMessage: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SendSMMessageRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMMessages_SendSMWarn: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SendSMWarnRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMMessages_SendSuccess: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SendSuccessRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannelStreamLinks_GetSMChannelStreams: {
		parameters: {
			query?: {
				SMChannelId?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SMStreamDto"][];
				};
			};
		};
	};
	SMChannelStreamLinks_AddSMStreamToSMChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddSMStreamToSMChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannelStreamLinks_RemoveSMStreamFromSMChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveSMStreamFromSMChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannelStreamLinks_SetSMStreamRanks: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMStreamRanksRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_GetPagedSMChannels: {
		parameters: {
			query?: {
				PageNumber?: number;
				PageSize?: number;
				OrderBy?: string;
				JSONArgumentString?: string | null;
				JSONFiltersString?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PagedResponseOfSMChannelDto"];
				};
			};
		};
	};
	SMChannels_GetSMChannelUniqueName: {
		parameters: {
			query?: {
				SMChannelName?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
		};
	};
	SMChannels_AutoSetEPGFromParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AutoSetEPGFromParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_AutoSetEPG: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AutoSetEPGRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_AutoSetSMChannelNumbersFromParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AutoSetSMChannelNumbersFromParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_AutoSetSMChannelNumbers: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AutoSetSMChannelNumbersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_CopySMChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CopySMChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_CreateMultiViewChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateMultiViewChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_CreateSMChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateSMChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_CreateSMChannelsFromStreamParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateSMChannelsFromStreamParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_CreateSMChannelsFromStreams: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateSMChannelsFromStreamsRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_DeleteSMChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteSMChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_DeleteSMChannelsFromParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteSMChannelsFromParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_DeleteSMChannels: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteSMChannelsRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelEPGId: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelEPGIdRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelLogo: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelLogoRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelName: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelNameRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelNumber: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelNumberRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelsGroupFromParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelsGroupFromParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelsGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelsGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelsLogoFromEPGFromParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelsLogoFromEPGFromParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelsLogoFromEPG: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelsLogoFromEPGRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelsCommandProfileNameFromParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelsCommandProfileNameFromParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelsCommandProfileName: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelsCommandProfileNameRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_SetSMChannelCommandProfileName: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelCommandProfileNameRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_ToggleSMChannelsVisibleById: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ToggleSMChannelsVisibleByIdRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_ToggleSMChannelVisibleById: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ToggleSMChannelVisibleByIdRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_ToggleSMChannelVisibleByParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ToggleSMChannelVisibleByParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_UpdateMultiViewChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateMultiViewChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannels_UpdateSMChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateSMChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannelChannelLinks_GetSMChannelChannels: {
		parameters: {
			query?: {
				SMChannelId?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SMChannelDto"][];
				};
			};
		};
	};
	SMChannelChannelLinks_AddSMChannelToSMChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddSMChannelToSMChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannelChannelLinks_RemoveSMChannelFromSMChannel: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveSMChannelFromSMChannelRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SMChannelChannelLinks_SetSMChannelRanks: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetSMChannelRanksRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Settings_GetSettings: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SettingDto"];
				};
			};
		};
	};
	Settings_UpdateSetting: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateSettingRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UpdateSettingResponse"];
				};
			};
		};
	};
	SchedulesDirect_GetAvailableCountries: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CountryData"][];
				};
			};
		};
	};
	SchedulesDirect_GetHeadendsByCountryPostal: {
		parameters: {
			query?: {
				Country?: string;
				PostalCode?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HeadendDto"][];
				};
			};
		};
	};
	SchedulesDirect_GetHeadendsToView: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HeadendToView"][];
				};
			};
		};
	};
	SchedulesDirect_GetLineupPreviewChannel: {
		parameters: {
			query?: {
				Lineup?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["LineupPreviewChannel"][];
				};
			};
		};
	};
	SchedulesDirect_GetSelectedStationIds: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StationIdLineup"][];
				};
			};
		};
	};
	SchedulesDirect_GetStationChannelNames: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StationChannelName"][];
				};
			};
		};
	};
	SchedulesDirect_GetStationPreviews: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StationPreview"][];
				};
			};
		};
	};
	SchedulesDirect_GetSubScribedHeadends: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["HeadendDto"][];
				};
			};
		};
	};
	SchedulesDirect_GetSubscribedLineups: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SubscribedLineup"][];
				};
			};
		};
	};
	SchedulesDirect_AddHeadendToView: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddHeadendToViewRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SchedulesDirect_AddLineup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddLineupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SchedulesDirect_AddStation: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddStationRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SchedulesDirect_RemoveHeadendToView: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveHeadendToViewRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SchedulesDirect_RemoveLineup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveLineupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SchedulesDirect_RemoveStation: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveStationRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	SchedulesDirect_SetStations: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetStationsRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Profiles_GetCommandProfiles: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CommandProfileDto"][];
				};
			};
		};
	};
	Profiles_GetOutputProfile: {
		parameters: {
			query?: {
				OutputProfileName?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["OutputProfileDto"];
				};
			};
		};
	};
	Profiles_GetOutputProfiles: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["OutputProfileDto"][];
				};
			};
		};
	};
	Profiles_AddCommandProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddCommandProfileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Profiles_AddOutputProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddOutputProfileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Profiles_RemoveCommandProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveCommandProfileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Profiles_RemoveOutputProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveOutputProfileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Profiles_UpdateCommandProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateCommandProfileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Profiles_UpdateOutputProfile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateOutputProfileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	M3UFiles_GetM3UFileNames: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string[];
				};
			};
		};
	};
	M3UFiles_GetM3UFiles: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["M3UFileDto"][];
				};
			};
		};
	};
	M3UFiles_GetPagedM3UFiles: {
		parameters: {
			query?: {
				PageNumber?: number;
				PageSize?: number;
				OrderBy?: string;
				JSONArgumentString?: string | null;
				JSONFiltersString?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PagedResponseOfM3UFileDto"];
				};
			};
		};
	};
	M3UFiles_CreateM3UFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateM3UFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	M3UFiles_DeleteM3UFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteM3UFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	M3UFiles_ProcessM3UFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProcessM3UFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	M3UFiles_RefreshM3UFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RefreshM3UFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	M3UFiles_SyncChannels: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SyncChannelsRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	M3UFiles_UpdateM3UFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateM3UFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	M3UFiles_CreateM3UFileFromForm: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				"multipart/form-data": {
					Name?: string;
					/** Format: int32 */
					MaxStreamCount?: number | null;
					M3U8OutPutProfile?: string | null;
					M3UKey?: string | null;
					M3UName?: string | null;
					/** Format: int32 */
					StartingChannelNumber?: number | null;
					AutoSetChannelNumbers?: boolean | null;
					DefaultStreamGroupName?: string | null;
					/** Format: int32 */
					HoursToUpdate?: number | null;
					SyncChannels?: boolean | null;
					/** Format: binary */
					FormFile?: string | null;
					VODTags?: string[] | null;
				};
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Logs_GetLogContents: {
		parameters: {
			query?: {
				LogName?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
				};
			};
		};
	};
	Logs_GetLogNames: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string[];
				};
			};
		};
	};
	Logos_GetCustomLogos: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CustomLogoDto"][];
				};
			};
		};
	};
	Logos_GetLogoForChannel: {
		parameters: {
			query?: {
				SMChannelId?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["LogoDto"];
				};
			};
		};
	};
	Logos_GetLogo: {
		parameters: {
			query?: {
				Url?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["LogoDto"];
				};
			};
		};
	};
	Logos_GetLogos: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CustomLogoDto"][];
				};
			};
		};
	};
	Logos_AddCustomLogo: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddCustomLogoRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Logos_RemoveCustomLogo: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RemoveCustomLogoRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	General_SetTestTask: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SetTestTaskRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	EPGFiles_GetEPGFileNames: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string[];
				};
			};
		};
	};
	EPGFiles_GetEPGFilePreviewById: {
		parameters: {
			query?: {
				Id?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["EPGFilePreviewDto"][];
				};
			};
		};
	};
	EPGFiles_GetEPGFiles: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["EPGFileDto"][];
				};
			};
		};
	};
	EPGFiles_GetEPGNextEPGNumber: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": number;
				};
			};
		};
	};
	EPGFiles_GetPagedEPGFiles: {
		parameters: {
			query?: {
				PageNumber?: number;
				PageSize?: number;
				OrderBy?: string;
				JSONArgumentString?: string | null;
				JSONFiltersString?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PagedResponseOfEPGFileDto"];
				};
			};
		};
	};
	EPGFiles_CreateEPGFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateEPGFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	EPGFiles_DeleteEPGFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteEPGFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	EPGFiles_ProcessEPGFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProcessEPGFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	EPGFiles_RefreshEPGFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RefreshEPGFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	EPGFiles_UpdateEPGFile: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateEPGFileRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	EPGFiles_CreateEPGFileFromForm: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: {
			content: {
				"multipart/form-data": {
					/** Format: binary */
					FormFile?: string | null;
					Name?: string;
					/** Format: int32 */
					EPGNumber?: number;
					/** Format: int32 */
					HoursToUpdate?: number | null;
					/** Format: int32 */
					TimeShift?: number | null;
					Color?: string | null;
				};
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	EPG_GetEPGColors: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["EPGColorDto"][];
				};
			};
		};
	};
	EPG_EPGSync: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	Custom_GetCustomPlayList: {
		parameters: {
			query?: {
				SMStreamId?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CustomPlayList"];
				};
			};
		};
	};
	Custom_GetCustomPlayLists: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CustomPlayList"][];
				};
			};
		};
	};
	Custom_GetIntroPlayLists: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CustomPlayList"][];
				};
			};
		};
	};
	Custom_ScanForCustom: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	ChannelGroups_GetChannelGroupsFromSMChannels: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ChannelGroupDto"][];
				};
			};
		};
	};
	ChannelGroups_GetChannelGroups: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ChannelGroupDto"][];
				};
			};
		};
	};
	ChannelGroups_GetPagedChannelGroups: {
		parameters: {
			query?: {
				PageNumber?: number;
				PageSize?: number;
				OrderBy?: string;
				JSONArgumentString?: string | null;
				JSONFiltersString?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PagedResponseOfChannelGroupDto"];
				};
			};
		};
	};
	ChannelGroups_CreateChannelGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateChannelGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	ChannelGroups_DeleteAllChannelGroupsFromParameters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteAllChannelGroupsFromParametersRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	ChannelGroups_DeleteChannelGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteChannelGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	ChannelGroups_DeleteChannelGroups: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteChannelGroupsRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	ChannelGroups_UpdateChannelGroup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateChannelGroupRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
	ChannelGroups_UpdateChannelGroups: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateChannelGroupsRequest"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["APIResponse"];
				};
			};
		};
	};
}
